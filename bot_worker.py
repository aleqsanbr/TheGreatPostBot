import telebot
import math

def xor(a):
    res = 0
    for i in a:
        res ^= i
    return res


def prod(a):
    res = 1
    for i in a:
        res *= i
    return res


def valid_eval(f):
    f = str(f)
    if not (len(f) >= 2 and all([(lambda x: str(x) == "1" or str(x) == "0")(x) for x in f]) and math.log2(len(f)).is_integer()):
        raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–µ–ø–µ–Ω—å—é –¥–≤–æ–π–∫–∏ (2 –¥–ª—è –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, 4 –¥–ª—è –¥–≤—É—Ö, 8, 16 –∏ –ø—Ä.)")


def truth_table(f):
    f = str(f)
    cols = math.ceil(math.log2(len(f)))
    rows = len(f)
    table = []
    for i in range(rows):
        v = [int(r) for r in bin(i)[2:].zfill(cols)]
        dirty_row = [j for j in list(zip([v], [[int(f[i])]]))][0]
        r = []
        for item in dirty_row:
            r.extend(item)
        table.append(r)
    return table


def is_P0(eval):
    return eval[0] == "0"


def is_P1(eval):
    return eval[-1] == "1"


def is_L(eval):
    table_orig = truth_table(eval)
    table = [[]]
    for i in table_orig:
        if i[:-1].count(1) == 1:
            table.append(i)
    table = table[1:]
    a = [0] * (len(table[0][:-1]) + 1)
    a[0] = table_orig[0][-1]
    for i in range(0, len(table[0][:-1])):
        a[len(table[0][:-1]) - i] = a[0] ^ table[i][-1]
    new_eval = [a[0]] * len(eval)
    for i in range(1, len(table_orig)):
        for j in range(len(table_orig[i][:-1])):
            new_eval[i] ^= table_orig[i][j] * a[j + 1]
    eval = str(eval)
    str_new_eval = ""
    for i in new_eval:
        str_new_eval += str(i)
    new_eval = str_new_eval
    if new_eval == eval:
        return True
    else:
        return False


def is_S(eval):
    new_eval = str(eval[::-1]).replace("1", "*").replace("0", "1").replace("*", "0")
    if eval == new_eval:
        return True
    else:
        return False


def is_M(eval):
    eval = str(eval)
    table = truth_table(eval)
    if "1" in eval:
        starter = eval.index("1")
    else:
        starter = 0
    table = table[starter:]
    for i in range(len(table)):
        for j in range(i + 1, len(table)):
            checker = [x <= y for x in table[i][:-1] for y in table[j][:-1]]
            if all(checker):
                comparable = True
            else:
                comparable = False
            if comparable:
                if table[i][-1] > table[j][-1]:
                    return False
    return True

def belongs_msg(b):
    if b: return "–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ‚úÖ"
    else: return "–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ‚ùå"

bot = telebot.TeleBot(open("api.txt").readline(), parse_mode=None, skip_pending=True)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,
                 "–ü—Ä–∏–≤–µ—Ç! –£–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å, –∫ –∫–∞–∫–∏–º –∫–ª–∞—Å—Å–∞–º <a href='https://ru.wikipedia.org/wiki/–ü–æ—Å—Ç,_–≠–º–∏–ª—å_–õ–µ–æ–Ω'>–ü–æ—Å—Ç–∞</a> –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±—É–ª–µ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å —Ö–æ—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–∞ ü§© –í–≤–µ–¥–∏—Ç–µ eval (–≤–µ–∫—Ç–æ—Ä) –≤–∞—à–µ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∞ —è —Å–∫–∞–∂—É, —á–µ–º—É –æ–Ω–∞ —Ç–∞–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç. –ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∏ –¥—Ä—É–≥–æ–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
                 parse_mode="HTML")


@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message,
                 "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–µ–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, <pre>11001010</pre>\n\n2Ô∏è‚É£ –ë–æ—Ç –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–ª–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥–æ–º—É <a href='https://ru.wikipedia.org/wiki/–ü—Ä–µ–¥–ø–æ–ª–Ω—ã–µ_–∫–ª–∞—Å—Å—ã'>–∫–ª–∞—Å—Å—É –ü–æ—Å—Ç–∞</a>\n\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ <a href='https://ru.wikipedia.org/wiki/–ü–æ—Å—Ç,_–≠–º–∏–ª—å_–õ–µ–æ–Ω'>–ü–æ—Å—Ç–∞</a></b>\n\nüí´ <b>P0</b> - —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–µ 0. –¢. –µ. f(0, 0, ... 0) = 0.\nü™Ñ <b>P1</b> - —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–µ 1. –¢. –µ. f(1, 1, ... 1) = 1.\nüêç <b>L</b> - <a href='https://ru.wikipedia.org/wiki/–õ–∏–Ω–µ–π–Ω–∞—è_–±—É–ª–µ–≤–∞_—Ñ—É–Ω–∫—Ü–∏—è'>–ª–∏–Ω–µ–π–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</a>, —Ç.–µ. –≤ <a href='https://en.wikipedia.org/wiki/Algebraic_normal_form'>–∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ (–ê–ù–§)</a> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.\n‚ôæÔ∏è <b>S</b> - <a href='https://ru.wikipedia.org/wiki/–°–∞–º–æ–¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–∞—è_—Ñ—É–Ω–∫—Ü–∏—è'>—Å–∞–º–æ–¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</a>, —Ç. –µ. f = f*.\nüíØ <b>M</b> - <a href='https://ru.wikipedia.org/wiki/–ú–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è_–±—É–ª–µ–≤–∞_—Ñ—É–Ω–∫—Ü–∏—è'>–º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</a>, —Ç. –µ. –¥–ª—è –ª—é–±—ã—Ö –¥–≤—É—Ö —Å—Ä–∞–≤–Ω–∏–º—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ an –∏ bn —Ç–∞–∫–∏—Ö, —á—Ç–æ a ‚âº b, –∏–º–µ–µ—Ç –º–µ—Å—Ç–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ f(an) ‚â§ f(bn).",
                 parse_mode="HTML")



@bot.message_handler(func=lambda message: True)
def ask(message):
    try:
        f = str(message.text)
        valid_eval(f)
        table = truth_table(f)
        str_table = ""
        for i in range(len(table)):
            for j in range(len(table[0])):
                str_table += str(table[i][j]) + " "
            str_table += "\n"
        if len(str_table) > 4096:
            bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            bot.send_message(message.chat.id, f"–¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏:\n\n{str_table}")
        bot.send_message(message.chat.id, f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞—Å—Å–∞–º:\n\n<b>P0:</b> {belongs_msg(is_P0(f))}\n<b>P1:</b> {belongs_msg(is_P1(f))}\n<b>L:</b> {belongs_msg(is_L(f))}\n<b>S:</b> {belongs_msg(is_S(f))}\n<b>M:</b> {belongs_msg(is_M(f))}", parse_mode="HTML")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùóÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \n\n{e}")


bot.infinity_polling()
